version: 2.1

# orbs:
#   octopus-cli: octopusdeploylabs/octopus-cli@0.0.3

#IMAGE_NAME="your-dockerhub-username/your-image-name"  [your-dockerhub-username: This should be replaced with your Docker Hub username. ] [your-image-name : it represents the repository name within your Docker Hub account where the image will be pushed.] 
  
executors:
  docker-publisher:
    environment: 
      IMAGE_NAME: devulb/circleci
    docker:
      - image: cimg/base:stable

jobs:
  # build-image: 
  #   executor: docker-publisher
  #   steps:
  #     - checkout
  #     - setup_remote_docker
  #     - run:
  #         name: Build Docker Image
  #         command: docker build -t $IMAGE_NAME:latest . 
  #     - run:
  #         name: Save Image as tar archive to publish to Docker Hub
  #         command: docker save -o image.tar $IMAGE_NAME
  #     - persist_to_workspace:
  #         root: .
  #         paths:
  #           - ./image.tar    
  define-var:
    executor: docker-publisher
    steps:
      - run:
          name: set branch variable
          command: |
            rm -f var.tmp
            export BRANCH=$(echo $CIRCLE_BRANCH | tr '[:upper:]' '[:lower:]') 
            echo "branch=$BRANCH" >> var.tmp
      - run:
          name: get the version and tag
          command: |
            if [ -n "$CIRCLE_TAG" ]; then
              echo "Using tag: $CIRCLE_TAG"
              echo "ver=$CIRCLE_TAG" >> var.tmp            
            elif [ -n "$APP_VER" != "empty" ]; then
              echo "Using app_ver: $APP_VER"
              echo "ver=$APP_VER" >> var.tmp
            else
              echo "Tag and app_ver are empty, using ver.txt"
              ver=$(cat ver.txt)
              echo "ver=$ver" >> var.tmp
            fi
      - run:
          name: determine release channel
          command: |             
            if [ "$BRANCH" = "dev" ]; then
              echo "release=$OCTOPUS_DEV_CHANNEL" >> var.tmp
            elif [ "$BRANCH" = "main" ]; then
              echo "release=$OCTOPUS_STD_CHANNEL" >> var.tmp
            else
              echo "release=$OCTOPUS_FEATURE_CHANNEL" >> var.tmp
            fi
      - run:
          name: Debug output
          command: cat var.tmp
      
  # publish-image:
  #     executor: docker-publisher
  #     steps:
  #       - attach_workspace:
  #           at: /tmp/workspace
  #       - setup_remote_docker
  #       - run:
  #           name: Load archived docker image
  #           command: docker load -i /tmp/workspace/image.tar
  #       - run:
  #           name: Publish Docker Imgae to Docker Hub
  #           command: |
  #             echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" -p "$docker_hub_token"
  #             IMAGE_TAG="0.0.${CIRCLE_BUILD_NUM}"
  #             docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
  #             #docker push $IMAGE_NAME:latest
  #             docker push $IMAGE_NAME:$IMAGE_TAG
  # build-octopus-info:
  #   executor: 
  #     name: octopus-cli/default
  #   steps: 
  #     - octopus-cli/install-tools
  #     - octopus-cli/build-information:
  #         api_key: $OCTOPUS_API_KEY
  #         package_id: $IMAGE  #check if the package requiures exact image name
  #         server: $OCTOPUS_SERVER_URL
  #         version: ${bamboo.inject.ver}-${CIRCLE_BRANCH}.${CIRCLE_BUILD_NUM}
  # build-octopus-release:
  #   executor: 
  #     name: octopus-cli/default
  #   steps:
  #     - octopus-cli/install-tools
  #     - octopus-cli/create-release:
  #         api_key: $OCTOPUS_API_KEY
  #         project: $OCTOPUS_PROJECT
  #         release_number: ${bamboo.inject.ver}-${CIRCLE_BRANCH}.${CIRCLE_BUILD_NUM}
  #         channel: #chennle name to be released
  #         server: $OCTOPUS_SERVER_URL          
workflows:
  test-deploy:
    jobs: 
      # - build-image:
      #     filters:
      #       branches:
      #         only: circleTest
      - define-var
      # - publish-image:
      #     requires:
      #       - build-image
      # - build-octopus-info:
      #     requires:
      #       - publish-image
      # - build-octopus-release:
      #     requires:
      #       - publish-image
      
          
        
