version: 2.1

orbs:
  octopus-cli: octopusdeploylabs/octopus-cli@0.0.3

#IMAGE_NAME="your-dockerhub-username/your-image-name"  [your-dockerhub-username: This should be replaced with your Docker Hub username. ] [your-image-name : it represents the repository name within your Docker Hub account where the image will be pushed.] 
  
executors:
  docker-publisher:
    environment: 
      IMAGE_NAME: devulb/circleci
    docker:
      - image: cimg/base:stable

jobs:
  build-image: 
    executor: docker-publisher
    steps:
      - checkout
      - run:
          name: set branch variable
          command: |
            rm -f var.tmp
            export BRANCH=$(echo $CIRCLE_BRANCH | tr '[:upper:]' '[:lower:]') 
            echo "branch=$BRANCH" >> var.tmp
      - run:
          name: get the version and tag
          command: |                      
            if [ -n "$CIRCLE_TAG" ]; then
              echo "Using tag: $CIRCLE_TAG"
              echo "ver=$CIRCLE_TAG" >> var.tmp                           
            elif [ -n "$APP_VER" ] && [ "$APP_VER" != "empty" ]; then
              echo "Using app_ver: $APP_VER"
              echo "ver=$APP_VER" >> var.tmp                            
            else
              echo "Tag and app_ver are empty, using ver.txt"
              ver=$(cat ver.txt)
              echo "ver=$ver" >> var.tmp              
            fi            
      - run:
          name: determine release channel
          command: |             
            if [ "$BRANCH" = "dev" ]; then
              echo "release=$OCTOPUS_DEV_CHANNEL" >> var.tmp              
            elif [ "$BRANCH" = "main" ]; then
              echo "release=$OCTOPUS_STD_CHANNEL" >> var.tmp              
            else
              echo "release=$OCTOPUS_FEATURE_CHANNEL" >> var.tmp              
            fi
      - run:
          name: version release number
          command: |
            ver=$(grep -oP 'ver=\K.*' var.tmp)
            branch=$(grep -oP 'branch=\K.*' var.tmp)
            vlnum="$ver-$branch.${CIRCLE_BUILD_NUM}"
            echo "$vlnum"
            echo "vrnum=$vlnum" >> var.tmp
      - setup_remote_docker
      - run:
          name: Build Docker Image
          command: docker build -t $IMAGE_NAME:latest . 
      - run:
          name: Save Image as tar archive to publish to Docker Hub
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
            - ./var.tmp
      - run:
          name: Debug output
          command: cat var.tmp 

  #INDEPENDENT JOB TO DEFINE THE NECESSARY VARIABLE: used for debugging only
  # define-var:
  #   executor: docker-publisher
  #   steps:
  #     - checkout          
  #     - run:
  #         name: set branch variable
  #         command: |
  #           rm -f var.tmp
  #           export BRANCH=$(echo $CIRCLE_BRANCH | tr '[:upper:]' '[:lower:]') 
  #           echo "branch=$BRANCH" >> var.tmp
  #     - run:
  #         name: get the version and tag
  #         command: |                      
  #           if [ -n "$CIRCLE_TAG" ]; then
  #             echo "Using tag: $CIRCLE_TAG"
  #             echo "ver=$CIRCLE_TAG" >> var.tmp                           
  #           elif [ -n "$APP_VER" ] && [ "$APP_VER" != "empty" ]; then
  #             echo "Using app_ver: $APP_VER"
  #             echo "ver=$APP_VER" >> var.tmp                            
  #           else
  #             echo "Tag and app_ver are empty, using ver.txt"
  #             ver=$(cat ver.txt)
  #             echo "ver=$ver" >> var.tmp              
  #           fi            
  #     - run:
  #         name: determine release channel
  #         command: |             
  #           if [ "$BRANCH" = "dev" ]; then
  #             echo "release=$OCTOPUS_DEV_CHANNEL" >> var.tmp              
  #           elif [ "$BRANCH" = "main" ]; then
  #             echo "release=$OCTOPUS_STD_CHANNEL" >> var.tmp              
  #           else
  #             echo "release=$OCTOPUS_FEATURE_CHANNEL" >> var.tmp              
  #           fi
  #     - run:
  #         name: version release number
  #         command: |
  #           ver=$(grep -oP 'ver=\K.*' var.tmp)
  #           branch=$(grep -oP 'branch=\K.*' var.tmp)
  #           vlnum="$ver-$branch.${CIRCLE_BUILD_NUM}"
  #           echo "$vlnum"
  #           echo "vrnum=$vlnum" >> var.tmp
  #     - persist_to_workspace:
  #         root: .
  #         paths:
  #           - ./var.tmp          
  #     - run:
  #         name: Debug output
  #         command: cat var.tmp          
      
  publish-image:
      executor: docker-publisher
      steps:
        - attach_workspace:
            at: /tmp/workspace
        - run:
            name: Verify files are in attach_workspace
            command: ls -al /tmp/workspace
        - setup_remote_docker
        - run:
            name: Load archived docker image
            command: docker load -i /tmp/workspace/image.tar
        - run:
            name: Publish Docker Imgae to Docker Hub
            command: |
              docker login -u "$DOCKERHUB_USERNAME" -p "$docker_hub_token"              
              IMAGE_TAG=$(cat /tmp/workspace/var.tmp | grep "^vrnum=" | cut -d "=" -f2)
              echo $IMAGE_TAG
              docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG              
              docker push $IMAGE_NAME:$IMAGE_TAG
  
  octopus-build-release:
    executor: 
      name: octopus-cli/default
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
            name: Verify files are in attach_workspace
            command: ls -al /tmp/workspace
      - octopus-cli/install-tools
      - octopus-cli/build-information:
          api_key: $OCTOPUS_API_KEY
          package_id: $IMAGE 
          server: $OCTOPUS_SERVER_URL
          version: $(cat /tmp/workspace/var.tmp | grep "^vrnum=" | cut -d "=" -f2)
      - octopus-cli/create-release:
          api_key: $OCTOPUS_API_KEY
          project: $OCTOPUS_PROJECT
          release_number: $(cat /tmp/workspace/var.tmp | grep "^vrnum=" | cut -d "=" -f2)
          channel: $(cat /tmp/workspace/var.tmp | grep "^release=" | cut -d "=" -f2)
          server: $OCTOPUS_SERVER_URL
       
workflows:
  test-deploy:
    jobs: 
      - build-image:
          filters:
            branches:
              only: circleTest  
      - publish-image:
          requires:
            - build-image
      - octopus-build-release:
          requires:
            - publish-image
      
          
        
